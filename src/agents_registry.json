{
    "default-LLM.py": {
        "function": "Default LLM agent",
        "required_inputs": [
            {
                "variable": "task_definition",
                "description": "The description of the task to be solved by the LLM agent."
            }
        ],
        "output": "text result of the agent's action",
        "class": "DefaultLlmAgent",
        "models": [
            {
                "name": "gpt-4o-mini",
                "hyperparameters": {
                    "temperature": [
                        0.0,
                        1.0
                    ],
                    "api_version": "2023-03-15-preview",
                    "deployment_name": "gpt-4o-mini"
                }
            },
            {
                "name": "Phi-4-mini-instruct",
                "hyperparameters": {
                    "temperature": [
                        0.0,
                        1.0
                    ],
                    "top_p": [
                        0.1,
                        1.0
                    ],
                    "presence_penalty": [
                        -2.0,
                        2.0
                    ],
                    "frequency_penalty": [
                        -1.0,
                        1.0
                    ]
                }
            },
            {
                "name": "Llama-3.3-70B-Instruct",
                "hyperparameters": {
                    "temperature": [
                        0.0,
                        1.0
                    ],
                    "top_p": [
                        0.1,
                        1.0
                    ],
                    "presence_penalty": [
                        -2.0,
                        2.0
                    ],
                    "frequency_penalty": [
                        -1.0,
                        1.0
                    ]
                }
            },
            {
                "name": "DeepSeek-R1",
                "hyperparameters": {}
            },
            {
                "name": "qwen/qwen2.5-coder-32b-instruct",
                "hyperparameters": {
                    "temperature": [
                        0.0,
                        1.0
                    ],
                    "top_p": [
                        0.1,
                        1.0
                    ]
                }
            }
        ]
    },
    "occupancy_detector_agent.py": {
        "function": "Detects the number of people in an image",
        "required_inputs": [
            {
                "variable": "image_path",
                "description": "The path or file of the image to be analyzed."
            },
            {
                "variable": "occupancy_time",
                "description": "Text with the time at which the occupancy image is taken in the following format YYYY-MM-DD HH:MM:SS."
            }
        ],
        "output": "number of detected people",
        "class": "OccupancyDetectorAgent",
        "models": [
            {
                "name": "yolo11n",
                "hyperparameters": {
                    "classes": [],
                    "confidence": [
                        0.5
                    ]
                }
            },
            {
                "name": "yolov8n",
                "hyperparameters": {
                    "classes": [],
                    "confidence": [
                        0.5
                    ]
                }
            },
            {
                "name": "Llama-3.2-11B-Vision-Instruct",
                "hyperparameters": {
                    "temperature": [
                        0.0,
                        1.0
                    ],
                    "top_p": [
                        0.1,
                        1.0
                    ],
                    "presence_penalty": [
                        -2.0,
                        2.0
                    ],
                    "frequency_penalty": [
                        -1.0,
                        1.0
                    ]
                }
            },
            {
                "name": "Phi-4-multimodal-instruct",
                "hyperparameters": {
                    "temperature": [
                        0.0,
                        1.0
                    ],
                    "top_p": [
                        0.1,
                        1.0
                    ],
                    "presence_penalty": [
                        -2.0,
                        2.0
                    ],
                    "frequency_penalty": [
                        -1.0,
                        1.0
                    ]
                }
            },
            {
                "name": "gpt-4o",
                "hyperparameters": {
                    "temperature": [
                        0.0,
                        1.0
                    ],
                    "api_version": "2024-12-01-preview",
                    "deployment_name": "gpt-4o"
                }
            }
        ]
    },
    "occupancy_forecast_agent.py": {
        "function": "Forecast occupancy based on detected people and historical data",
        "required_inputs": [
            {
                "variable": "task_definition",
                "description": "The description of the task to be solved by the LLM agent."
            },
            {
                "variable": "forecast_horizon",
                "description": "The horizon number in hours for the forecast (integer)."
            }
        ],
        "output": "occupancy_forecast time series",
        "class": "OccupancyForecastAgent",
        "models": [
            {
                "name": "prophet",
                "hyperparameters": {
                    "weekly_seasonality": [
                        false,
                        true,
                        "auto"
                    ],
                    "seasonality_prior_scale": [
                        0.01,
                        10.0
                    ],
                    "changepoint_prior_scale": [
                        0.01,
                        0.5
                    ],
                    "seasonality_mode": [
                        "additive",
                        "multiplicative"
                    ]
                }
            }
        ]
    },
    "thermodynamic_prediction_agent.py": {
        "function": "Predict the temperature evolution of a room based on the room's occupancy forecast",
        "required_inputs": [
            {
                "variable": "task_definition",
                "description": "The description of the task to be solved by the LLM agent."
            },
            {
                "variable": "forecast_horizon",
                "description": "The horizon number in hours for the forecast (integer)."
            },
            {
                "variable": "initial_temperature",
                "description": "The initial temperature of the room in Celsius (float)."
            },
            {
                "variable": "outside_temperature",
                "description": "The outside temperature in Celsius (float)."
            },
            {
                "variable": "room_volume",
                "description": "The volume of the room in cubic meters (float)."
            }
        ],
        "output": "temperature evolution",
        "class": "ThermodynamicPredictionAgent",
        "models": [
            {
                "name": "thermodynamic_prediction",
                "hyperparameters": {
                    "c_p": [
                        1000.0,
                        1010.0
                    ],
                    "air_density": [
                        1.1,
                        1.3
                    ],
                    "person_heat": [
                        70,
                        100
                    ],
                    "ACH": [
                        0.2,
                        0.5
                    ],
                    "U": [
                        0.3,
                        0.5
                    ]
                }
            }
        ]
    }
}